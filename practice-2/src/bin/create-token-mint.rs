use solana_sdk::{
    commitment_config::{CommitmentConfig, CommitmentLevel},
    signature::{Keypair, Signer},
    transaction::Transaction,
    system_instruction,
    program_pack::Pack,
};
use solana_client::{
    rpc_client::RpcClient,
    rpc_config::RpcSendTransactionConfig,
};
use spl_token::{
    instruction as token_instruction,
    state::Mint,
};
use std::env;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv::dotenv().ok(); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dotenv –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let private_key = env::var("SECRET_KEY").expect("Add SECRET_KEY to .env!");

    // –£–¥–∞–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    let private_key_str = private_key
        .trim_start_matches('[')
        .trim_end_matches(']')
        .replace(" ", "");

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –≤–µ–∫—Ç–æ—Ä –±–∞–π—Ç
    let secret_key_bytes: Vec<u8> = private_key_str
        .split(',')
        .filter_map(|s| s.trim().parse().ok())
        .collect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–∫—Ç–æ—Ä –±–∞–π—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if secret_key_bytes.is_empty() {
        panic!("SECRET_KEY contains no valid bytes");
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ Keypair
    let sender = Keypair::from_bytes(&secret_key_bytes)?;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å devnet
    let connection = RpcClient::new("https://api.devnet.solana.com".to_string());

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    println!("üîë Our public key is: {}", sender.pubkey());

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Keypair –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    let token_account = Keypair::new();
    let rent_exemption = connection.get_minimum_balance_for_rent_exemption(Mint::LEN)?;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    let create_account_ix = system_instruction::create_account(
        &sender.pubkey(),
        &token_account.pubkey(),
        rent_exemption,
        Mint::LEN as u64,
        &spl_token::id(),
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    let initialize_mint_ix = token_instruction::initialize_mint(
        &spl_token::id(),
        &token_account.pubkey(),
        &sender.pubkey(),  // –í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–∫–µ–Ω–∞
        None,
        2,
    )?;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫—Ö–µ—à
    let recent_blockhash = connection.get_latest_blockhash()?;

    // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    let transaction = Transaction::new_signed_with_payer(
        &[create_account_ix, initialize_mint_ix],
        Some(&sender.pubkey()),
        &[&sender, &token_account],
        recent_blockhash,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    connection.send_and_confirm_transaction_with_spinner_and_config(
        &transaction,
        CommitmentConfig {
            commitment: CommitmentLevel::Processed,
        },
        RpcSendTransactionConfig {
            skip_preflight: false,
            preflight_commitment: Some(CommitmentLevel::Processed),
            ..RpcSendTransactionConfig::default()
        },
    )?;

    // –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ Explorer
    let link = format!(
        "https://explorer.solana.com/address/{}?cluster=devnet",
        token_account.pubkey()
    );
    println!("‚úÖ Token Mint: {}", link);

    Ok(())
}
